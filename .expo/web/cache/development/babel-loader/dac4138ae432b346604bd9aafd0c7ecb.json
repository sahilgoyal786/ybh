{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = BottomTabBar;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _BottomTabItem = _interopRequireDefault(require(\"./BottomTabItem\"));\n\nvar _useWindowDimensions = _interopRequireDefault(require(\"../utils/useWindowDimensions\"));\n\nvar _useIsKeyboardShown = _interopRequireDefault(require(\"../utils/useIsKeyboardShown\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar DEFAULT_TABBAR_HEIGHT = 49;\nvar COMPACT_TABBAR_HEIGHT = 32;\nvar DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\nvar useNativeDriver = _reactNative.Platform.OS !== 'web';\n\nfunction BottomTabBar(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      activeTintColor = _ref.activeTintColor,\n      _ref$adaptive = _ref.adaptive,\n      adaptive = _ref$adaptive === void 0 ? true : _ref$adaptive,\n      allowFontScaling = _ref.allowFontScaling,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      _ref$keyboardHidesTab = _ref.keyboardHidesTabBar,\n      keyboardHidesTabBar = _ref$keyboardHidesTab === void 0 ? false : _ref$keyboardHidesTab,\n      labelPosition = _ref.labelPosition,\n      labelStyle = _ref.labelStyle,\n      iconStyle = _ref.iconStyle,\n      safeAreaInsets = _ref.safeAreaInsets,\n      showLabel = _ref.showLabel,\n      style = _ref.style,\n      tabStyle = _ref.tabStyle;\n\n  var _safeAreaInsets$top, _safeAreaInsets$right, _safeAreaInsets$botto, _safeAreaInsets$left;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var buildLink = (0, _native.useLinkBuilder)();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var dimensions = (0, _useWindowDimensions.default)();\n  var isKeyboardShown = (0, _useIsKeyboardShown.default)();\n  var shouldShowTabBar = focusedOptions.tabBarVisible !== false && !(keyboardHidesTabBar && isKeyboardShown);\n\n  var visibilityAnimationConfigRef = _react.default.useRef(focusedOptions.tabBarVisibilityAnimationConfig);\n\n  _react.default.useEffect(function () {\n    visibilityAnimationConfigRef.current = focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n\n  var _React$useState = _react.default.useState(!shouldShowTabBar),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isTabBarHidden = _React$useState2[0],\n      setIsTabBarHidden = _React$useState2[1];\n\n  var _React$useState3 = _react.default.useState(function () {\n    return new _reactNative.Animated.Value(shouldShowTabBar ? 1 : 0);\n  }),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 1),\n      visible = _React$useState4[0];\n\n  _react.default.useEffect(function () {\n    var visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      var _visibilityAnimationC, _visibilityAnimationC2;\n\n      var animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC = visibilityAnimationConfig.show) === null || _visibilityAnimationC === void 0 ? void 0 : _visibilityAnimationC.animation) === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;\n      animation(visible, _objectSpread({\n        toValue: 1,\n        useNativeDriver: useNativeDriver,\n        duration: 250\n      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC2 = visibilityAnimationConfig.show) === null || _visibilityAnimationC2 === void 0 ? void 0 : _visibilityAnimationC2.config)).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      var _visibilityAnimationC3, _visibilityAnimationC4;\n\n      setIsTabBarHidden(true);\n\n      var _animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC3 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC3 === void 0 ? void 0 : _visibilityAnimationC3.animation) === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;\n\n      _animation(visible, _objectSpread({\n        toValue: 0,\n        useNativeDriver: useNativeDriver,\n        duration: 200\n      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC4 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC4 === void 0 ? void 0 : _visibilityAnimationC4.config)).start();\n    }\n  }, [visible, shouldShowTabBar]);\n\n  var _React$useState5 = _react.default.useState({\n    height: 0,\n    width: dimensions.width\n  }),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      layout = _React$useState6[0],\n      setLayout = _React$useState6[1];\n\n  var isLandscape = function isLandscape() {\n    return dimensions.width > dimensions.height;\n  };\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height: height,\n          width: width\n        };\n      }\n    });\n  };\n\n  var routes = state.routes;\n\n  var shouldUseHorizontalLabels = function shouldUseHorizontalLabels() {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      var flattenedStyle = _reactNative.StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      return isLandscape();\n    }\n  };\n\n  var defaultInsets = (0, _reactNativeSafeAreaContext.useSafeArea)();\n  var insets = {\n    top: (_safeAreaInsets$top = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top) !== null && _safeAreaInsets$top !== void 0 ? _safeAreaInsets$top : defaultInsets.top,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : defaultInsets.right,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : defaultInsets.bottom,\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : defaultInsets.left\n  };\n  var paddingBottom = Math.max(insets.bottom - _reactNative.Platform.select({\n    ios: 4,\n    default: 0\n  }), 0);\n\n  var getDefaultTabBarHeight = function getDefaultTabBarHeight() {\n    if (_reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && isLandscape() && shouldUseHorizontalLabels()) {\n      return COMPACT_TABBAR_HEIGHT;\n    }\n\n    return DEFAULT_TABBAR_HEIGHT;\n  };\n\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.tabBar, {\n      backgroundColor: colors.card,\n      borderTopColor: colors.border\n    }, {\n      transform: [{\n        translateY: visible.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height + paddingBottom + _reactNative.StyleSheet.hairlineWidth, 0]\n        })\n      }],\n      position: isTabBarHidden ? 'absolute' : null\n    }, {\n      height: getDefaultTabBarHeight() + paddingBottom,\n      paddingBottom: paddingBottom,\n      paddingHorizontal: Math.max(insets.left, insets.right)\n    }, style],\n    pointerEvents: isTabBarHidden ? 'none' : 'auto'\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.content,\n    onLayout: handleLayout\n  }, routes.map(function (route, index) {\n    var focused = index === state.index;\n    var options = descriptors[route.key].options;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, _native.CommonActions.navigate(route.name)), {}, {\n          target: state.key\n        }));\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' ? \"\".concat(label, \", tab, \").concat(index + 1, \" of \").concat(routes.length) : undefined;\n    return _react.default.createElement(_native.NavigationContext.Provider, {\n      key: route.key,\n      value: descriptors[route.key].navigation\n    }, _react.default.createElement(_native.NavigationRouteContext.Provider, {\n      value: route\n    }, _react.default.createElement(_BottomTabItem.default, {\n      route: route,\n      focused: focused,\n      horizontal: shouldUseHorizontalLabels(),\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityLabel: accessibilityLabel,\n      to: buildLink(route.name, route.params),\n      testID: options.tabBarTestID,\n      allowFontScaling: allowFontScaling,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      button: options.tabBarButton,\n      icon: options.tabBarIcon,\n      badge: options.tabBarBadge,\n      label: label,\n      showLabel: showLabel,\n      labelStyle: labelStyle,\n      iconStyle: iconStyle,\n      style: tabStyle\n    })));\n  })));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,\n    elevation: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["BottomTabBar.tsx"],"names":["DEFAULT_TABBAR_HEIGHT","COMPACT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","adaptive","keyboardHidesTabBar","tabStyle","colors","buildLink","focusedRoute","state","focusedDescriptor","descriptors","focusedOptions","dimensions","isKeyboardShown","shouldShowTabBar","visibilityAnimationConfigRef","React","Animated","visibilityAnimationConfig","animation","toValue","duration","finished","setIsTabBarHidden","height","width","isLandscape","handleLayout","e","setLayout","layout","routes","shouldUseHorizontalLabels","labelPosition","maxTabItemWidth","flattenedStyle","StyleSheet","defaultInsets","insets","top","safeAreaInsets","right","bottom","left","paddingBottom","ios","default","getDefaultTabBarHeight","styles","backgroundColor","borderTopColor","border","transform","translateY","inputRange","outputRange","position","isTabBarHidden","paddingHorizontal","Math","focused","index","options","route","onPress","event","type","target","canPreventDefault","navigation","CommonActions","key","onLongPress","label","accessibilityLabel","tabBar","borderTopWidth","elevation","content","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Platform,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  CommonActions,\n  useTheme,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nimport type { BottomTabBarProps } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst COMPACT_TABBAR_HEIGHT = 32;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive = true,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  iconStyle,\n  safeAreaInsets,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const dimensions = useWindowDimensions();\n  const isKeyboardShown = useIsKeyboardShown();\n\n  const shouldShowTabBar =\n    focusedOptions.tabBarVisible !== false &&\n    !(keyboardHidesTabBar && isKeyboardShown);\n\n  const visibilityAnimationConfigRef = React.useRef(\n    focusedOptions.tabBarVisibilityAnimationConfig\n  );\n\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current =\n      focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      const animation =\n        visibilityAnimationConfig?.show?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...visibilityAnimationConfig?.show?.config,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      const animation =\n        visibilityAnimationConfig?.hide?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...visibilityAnimationConfig?.hide?.config,\n      }).start();\n    }\n  }, [visible, shouldShowTabBar]);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const isLandscape = () => dimensions.width > dimensions.height;\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n  const shouldUseHorizontalLabels = () => {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      // Screen size matches a tablet\n      let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      return isLandscape();\n    }\n  };\n\n  const defaultInsets = useSafeArea();\n\n  const insets = {\n    top: safeAreaInsets?.top ?? defaultInsets.top,\n    right: safeAreaInsets?.right ?? defaultInsets.right,\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\n    left: safeAreaInsets?.left ?? defaultInsets.left,\n  };\n\n  const paddingBottom = Math.max(\n    insets.bottom - Platform.select({ ios: 4, default: 0 }),\n    0\n  );\n\n  const getDefaultTabBarHeight = () => {\n    if (\n      Platform.OS === 'ios' &&\n      !Platform.isPad &&\n      isLandscape() &&\n      shouldUseHorizontalLabels()\n    ) {\n      return COMPACT_TABBAR_HEIGHT;\n    }\n    return DEFAULT_TABBAR_HEIGHT;\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                  layout.height + paddingBottom + StyleSheet.hairlineWidth,\n                  0,\n                ],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : (null as any),\n        },\n        {\n          height: getDefaultTabBarHeight() + paddingBottom,\n          paddingBottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        style,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n    >\n      <View style={styles.content} onLayout={handleLayout}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate(route.name),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={shouldUseHorizontalLabels()}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={allowFontScaling}\n                  activeTintColor={activeTintColor}\n                  inactiveTintColor={inactiveTintColor}\n                  activeBackgroundColor={activeBackgroundColor}\n                  inactiveBackgroundColor={inactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={options.tabBarIcon}\n                  badge={options.tabBarBadge}\n                  label={label}\n                  showLabel={showLabel}\n                  labelStyle={labelStyle}\n                  iconStyle={iconStyle}\n                  style={tabStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}