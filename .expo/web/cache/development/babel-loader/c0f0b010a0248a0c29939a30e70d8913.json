{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sahil\\\\Desktop\\\\ybh\\\\node_modules\\\\react-native-draggable-grid\\\\built\\\\src\\\\draggable-grid.js\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DraggableGrid = void 0;\n\nvar React = require(\"react\");\n\nvar react_1 = require(\"react\");\n\nvar react_native_1 = require(\"react-native\");\n\nvar block_1 = require(\"./block\");\n\nvar utils_1 = require(\"./utils\");\n\nvar activeBlockOffset = {\n  x: 0,\n  y: 0\n};\n\nexports.DraggableGrid = function (props) {\n  var blockPositions = react_1.useState([])[0];\n  var orderMap = react_1.useState({})[0];\n  var itemMap = react_1.useState({})[0];\n  var items = react_1.useState([])[0];\n\n  var _a = react_1.useState(0),\n      blockHeight = _a[0],\n      setBlockHeight = _a[1];\n\n  var _b = react_1.useState(0),\n      blockWidth = _b[0],\n      setBlockWidth = _b[1];\n\n  var gridHeight = react_1.useState(new react_native_1.Animated.Value(0))[0];\n\n  var _c = react_1.useState(false),\n      hadInitBlockSize = _c[0],\n      setHadInitBlockSize = _c[1];\n\n  var dragStartAnimatedValue = react_1.useState(new react_native_1.Animated.Value(1))[0];\n\n  var _d = react_1.useState({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  }),\n      gridLayout = _d[0],\n      setGridLayout = _d[1];\n\n  var _e = react_1.useState(),\n      activeItemIndex = _e[0],\n      setActiveItemIndex = _e[1];\n\n  var assessGridSize = function assessGridSize(event) {\n    if (!hadInitBlockSize) {\n      var blockWidth_1 = event.nativeEvent.layout.width / props.numColumns;\n      var blockHeight_1 = props.itemHeight || blockWidth_1;\n      setBlockWidth(blockWidth_1);\n      setBlockHeight(blockHeight_1);\n      setGridLayout(event.nativeEvent.layout);\n      setHadInitBlockSize(true);\n    }\n  };\n\n  var _f = react_1.useState(false),\n      panResponderCapture = _f[0],\n      setPanResponderCapture = _f[1];\n\n  var panResponder = react_native_1.PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {\n      return false;\n    },\n    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n      return panResponderCapture;\n    },\n    onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {\n      return panResponderCapture;\n    },\n    onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {\n      return false;\n    },\n    onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n      return false;\n    },\n    onPanResponderGrant: onStartDrag,\n    onPanResponderMove: onHandMove,\n    onPanResponderRelease: onHandRelease\n  });\n\n  function initBlockPositions() {\n    items.forEach(function (item, index) {\n      blockPositions[index] = getBlockPositionByOrder(index);\n    });\n  }\n\n  function getBlockPositionByOrder(order) {\n    if (blockPositions[order]) {\n      return blockPositions[order];\n    }\n\n    var columnOnRow = order % props.numColumns;\n    var y = blockHeight * Math.floor(order / props.numColumns);\n    var x = columnOnRow * blockWidth;\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  function resetGridHeight() {\n    var rowCount = Math.ceil(props.data.length / props.numColumns);\n    gridHeight.setValue(rowCount * blockHeight);\n  }\n\n  function onBlockPress(itemIndex) {\n    props.onItemPress && props.onItemPress(items[itemIndex].itemData);\n  }\n\n  function onStartDrag(nativeEvent, gestureState) {\n    var activeItem = getActiveItem();\n    if (!activeItem) return false;\n    props.onDragStart && props.onDragStart(activeItem.itemData);\n    var x0 = gestureState.x0,\n        y0 = gestureState.y0,\n        moveX = gestureState.moveX,\n        moveY = gestureState.moveY;\n    var activeOrigin = blockPositions[orderMap[activeItem.key].order];\n    var x = activeOrigin.x - x0;\n    var y = activeOrigin.y - y0;\n    activeItem.currentPosition.setOffset({\n      x: x,\n      y: y\n    });\n    activeBlockOffset = {\n      x: x,\n      y: y\n    };\n    activeItem.currentPosition.setValue({\n      x: moveX,\n      y: moveY\n    });\n  }\n\n  function onHandMove(nativeEvent, gestureState) {\n    var activeItem = getActiveItem();\n    if (!activeItem) return false;\n    var moveX = gestureState.moveX,\n        moveY = gestureState.moveY;\n    props.onDragging && props.onDragging(gestureState);\n    var xChokeAmount = Math.max(0, activeBlockOffset.x + moveX - (gridLayout.width - blockWidth));\n    var xMinChokeAmount = Math.min(0, activeBlockOffset.x + moveX);\n    var dragPosition = {\n      x: moveX - xChokeAmount - xMinChokeAmount,\n      y: moveY\n    };\n    var originPosition = blockPositions[orderMap[activeItem.key].order];\n    var dragPositionToActivePositionDistance = getDistance(dragPosition, originPosition);\n    activeItem.currentPosition.setValue(dragPosition);\n    var closetItemIndex = activeItemIndex;\n    var closetDistance = dragPositionToActivePositionDistance;\n    items.forEach(function (item, index) {\n      if (item.itemData.disabledReSorted) return;\n\n      if (index != activeItemIndex) {\n        var dragPositionToItemPositionDistance = getDistance(dragPosition, blockPositions[orderMap[item.key].order]);\n\n        if (dragPositionToItemPositionDistance < closetDistance && dragPositionToItemPositionDistance < blockWidth) {\n          closetItemIndex = index;\n          closetDistance = dragPositionToItemPositionDistance;\n        }\n      }\n    });\n\n    if (activeItemIndex != closetItemIndex) {\n      var closetOrder = orderMap[items[closetItemIndex].key].order;\n      resetBlockPositionByOrder(orderMap[activeItem.key].order, closetOrder);\n      orderMap[activeItem.key].order = closetOrder;\n      props.onResetSort && props.onResetSort(getSortData());\n    }\n  }\n\n  function onHandRelease() {\n    var activeItem = getActiveItem();\n    if (!activeItem) return false;\n    props.onDragRelease && props.onDragRelease(getSortData());\n    setPanResponderCapture(false);\n    activeItem.currentPosition.flattenOffset();\n    moveBlockToBlockOrderPosition(activeItem.key);\n    setActiveItemIndex(undefined);\n  }\n\n  function resetBlockPositionByOrder(activeItemOrder, insertedPositionOrder) {\n    var disabledReSortedItemCount = 0;\n\n    if (activeItemOrder > insertedPositionOrder) {\n      for (var i = activeItemOrder - 1; i >= insertedPositionOrder; i--) {\n        var key = getKeyByOrder(i);\n        var item = itemMap[key];\n\n        if (item && item.disabledReSorted) {\n          disabledReSortedItemCount++;\n        } else {\n          orderMap[key].order += disabledReSortedItemCount + 1;\n          disabledReSortedItemCount = 0;\n          moveBlockToBlockOrderPosition(key);\n        }\n      }\n    } else {\n      for (var i = activeItemOrder + 1; i <= insertedPositionOrder; i++) {\n        var key = getKeyByOrder(i);\n        var item = itemMap[key];\n\n        if (item && item.disabledReSorted) {\n          disabledReSortedItemCount++;\n        } else {\n          orderMap[key].order -= disabledReSortedItemCount + 1;\n          disabledReSortedItemCount = 0;\n          moveBlockToBlockOrderPosition(key);\n        }\n      }\n    }\n  }\n\n  function moveBlockToBlockOrderPosition(itemKey) {\n    var itemIndex = utils_1.findIndex(items, function (item) {\n      return item.key === itemKey;\n    });\n    items[itemIndex].currentPosition.flattenOffset();\n    react_native_1.Animated.timing(items[itemIndex].currentPosition, {\n      toValue: blockPositions[orderMap[itemKey].order],\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n  }\n\n  function getKeyByOrder(order) {\n    return utils_1.findKey(orderMap, function (item) {\n      return item.order === order;\n    });\n  }\n\n  function getSortData() {\n    var sortData = [];\n    items.forEach(function (item) {\n      sortData[orderMap[item.key].order] = item.itemData;\n    });\n    return sortData;\n  }\n\n  function getDistance(startOffset, endOffset) {\n    var xDistance = startOffset.x + activeBlockOffset.x - endOffset.x;\n    var yDistance = startOffset.y + activeBlockOffset.y - endOffset.y;\n    return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\n  }\n\n  function setActiveBlock(itemIndex, item) {\n    if (item.disabledDrag) return;\n    setPanResponderCapture(true);\n    setActiveItemIndex(itemIndex);\n  }\n\n  function startDragStartAnimation() {\n    if (!props.dragStartAnimation) {\n      dragStartAnimatedValue.setValue(1);\n      react_native_1.Animated.timing(dragStartAnimatedValue, {\n        toValue: 1.1,\n        duration: 100,\n        useNativeDriver: false\n      }).start();\n    }\n  }\n\n  function getBlockStyle(itemIndex) {\n    return [{\n      justifyContent: 'center',\n      alignItems: 'center'\n    }, hadInitBlockSize && {\n      width: blockWidth,\n      height: blockHeight,\n      position: 'absolute',\n      top: items[itemIndex].currentPosition.getLayout().top,\n      left: items[itemIndex].currentPosition.getLayout().left\n    }];\n  }\n\n  function getDragStartAnimation(itemIndex) {\n    if (activeItemIndex != itemIndex) {\n      return;\n    }\n\n    var dragStartAnimation = props.dragStartAnimation || getDefaultDragStartAnimation();\n    return __assign({\n      zIndex: 3\n    }, dragStartAnimation);\n  }\n\n  function getActiveItem() {\n    if (activeItemIndex === undefined) return false;\n    return items[activeItemIndex];\n  }\n\n  function getDefaultDragStartAnimation() {\n    return {\n      transform: [{\n        scale: dragStartAnimatedValue\n      }],\n      shadowColor: '#000000',\n      shadowOpacity: 0.2,\n      shadowRadius: 6,\n      shadowOffset: {\n        width: 1,\n        height: 1\n      }\n    };\n  }\n\n  function addItem(item, index) {\n    blockPositions.push(getBlockPositionByOrder(items.length));\n    orderMap[item.key] = {\n      order: index\n    };\n    itemMap[item.key] = item;\n    items.push({\n      key: item.key,\n      itemData: item,\n      currentPosition: new react_native_1.Animated.ValueXY(getBlockPositionByOrder(index))\n    });\n  }\n\n  function removeItem(item) {\n    var itemIndex = utils_1.findIndex(items, function (curItem) {\n      return curItem.key === item.key;\n    });\n    items.splice(itemIndex, 1);\n    blockPositions.pop();\n    delete orderMap[item.key];\n  }\n\n  function diffData() {\n    props.data.forEach(function (item, index) {\n      if (orderMap[item.key]) {\n        if (orderMap[item.key].order != index) {\n          orderMap[item.key].order = index;\n          moveBlockToBlockOrderPosition(item.key);\n        }\n\n        var currentItem = items.find(function (i) {\n          return i.key === item.key;\n        });\n\n        if (currentItem) {\n          currentItem.itemData = item;\n        }\n\n        itemMap[item.key] = item;\n      } else {\n        addItem(item, index);\n      }\n    });\n    var deleteItems = utils_1.differenceBy(items, props.data, 'key');\n    deleteItems.forEach(function (item) {\n      removeItem(item);\n    });\n  }\n\n  react_1.useEffect(function () {\n    startDragStartAnimation();\n  }, [activeItemIndex]);\n  react_1.useEffect(function () {\n    if (hadInitBlockSize) {\n      initBlockPositions();\n    }\n  }, [gridLayout]);\n  react_1.useEffect(function () {\n    resetGridHeight();\n  });\n\n  if (hadInitBlockSize) {\n    diffData();\n  }\n\n  var itemList = items.map(function (item, itemIndex) {\n    return React.createElement(block_1.Block, {\n      onPress: onBlockPress.bind(null, itemIndex),\n      onLongPress: setActiveBlock.bind(null, itemIndex, item.itemData),\n      panHandlers: panResponder.panHandlers,\n      style: getBlockStyle(itemIndex),\n      dragStartAnimationStyle: getDragStartAnimation(itemIndex),\n      key: item.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }\n    }, props.renderItem(item.itemData, orderMap[item.key].order));\n  });\n  return React.createElement(react_native_1.Animated.View, {\n    style: [styles.draggableGrid, props.style, {\n      height: gridHeight\n    }],\n    onLayout: assessGridSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }\n  }, hadInitBlockSize && itemList);\n};\n\nvar styles = react_native_1.StyleSheet.create({\n  draggableGrid: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  }\n});","map":{"version":3,"sources":["../../src/draggable-grid.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DraggableGrid = void 0;\nvar React = require(\"react\");\nvar react_1 = require(\"react\");\nvar react_native_1 = require(\"react-native\");\nvar block_1 = require(\"./block\");\nvar utils_1 = require(\"./utils\");\nvar activeBlockOffset = { x: 0, y: 0 };\nexports.DraggableGrid = function (props) {\n    var blockPositions = react_1.useState([])[0];\n    var orderMap = react_1.useState({})[0];\n    var itemMap = react_1.useState({})[0];\n    var items = react_1.useState([])[0];\n    var _a = react_1.useState(0), blockHeight = _a[0], setBlockHeight = _a[1];\n    var _b = react_1.useState(0), blockWidth = _b[0], setBlockWidth = _b[1];\n    var gridHeight = react_1.useState(new react_native_1.Animated.Value(0))[0];\n    var _c = react_1.useState(false), hadInitBlockSize = _c[0], setHadInitBlockSize = _c[1];\n    var dragStartAnimatedValue = react_1.useState(new react_native_1.Animated.Value(1))[0];\n    var _d = react_1.useState({\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    }), gridLayout = _d[0], setGridLayout = _d[1];\n    var _e = react_1.useState(), activeItemIndex = _e[0], setActiveItemIndex = _e[1];\n    var assessGridSize = function (event) {\n        if (!hadInitBlockSize) {\n            var blockWidth_1 = event.nativeEvent.layout.width / props.numColumns;\n            var blockHeight_1 = props.itemHeight || blockWidth_1;\n            setBlockWidth(blockWidth_1);\n            setBlockHeight(blockHeight_1);\n            setGridLayout(event.nativeEvent.layout);\n            setHadInitBlockSize(true);\n        }\n    };\n    var _f = react_1.useState(false), panResponderCapture = _f[0], setPanResponderCapture = _f[1];\n    var panResponder = react_native_1.PanResponder.create({\n        onStartShouldSetPanResponder: function () { return true; },\n        onStartShouldSetPanResponderCapture: function () { return false; },\n        onMoveShouldSetPanResponder: function () { return panResponderCapture; },\n        onMoveShouldSetPanResponderCapture: function () { return panResponderCapture; },\n        onShouldBlockNativeResponder: function () { return false; },\n        onPanResponderTerminationRequest: function () { return false; },\n        onPanResponderGrant: onStartDrag,\n        onPanResponderMove: onHandMove,\n        onPanResponderRelease: onHandRelease,\n    });\n    function initBlockPositions() {\n        items.forEach(function (item, index) {\n            blockPositions[index] = getBlockPositionByOrder(index);\n        });\n    }\n    function getBlockPositionByOrder(order) {\n        if (blockPositions[order]) {\n            return blockPositions[order];\n        }\n        var columnOnRow = order % props.numColumns;\n        var y = blockHeight * Math.floor(order / props.numColumns);\n        var x = columnOnRow * blockWidth;\n        return {\n            x: x,\n            y: y,\n        };\n    }\n    function resetGridHeight() {\n        var rowCount = Math.ceil(props.data.length / props.numColumns);\n        gridHeight.setValue(rowCount * blockHeight);\n    }\n    function onBlockPress(itemIndex) {\n        props.onItemPress && props.onItemPress(items[itemIndex].itemData);\n    }\n    function onStartDrag(nativeEvent, gestureState) {\n        var activeItem = getActiveItem();\n        if (!activeItem)\n            return false;\n        props.onDragStart && props.onDragStart(activeItem.itemData);\n        var x0 = gestureState.x0, y0 = gestureState.y0, moveX = gestureState.moveX, moveY = gestureState.moveY;\n        var activeOrigin = blockPositions[orderMap[activeItem.key].order];\n        var x = activeOrigin.x - x0;\n        var y = activeOrigin.y - y0;\n        activeItem.currentPosition.setOffset({\n            x: x,\n            y: y,\n        });\n        activeBlockOffset = {\n            x: x,\n            y: y,\n        };\n        activeItem.currentPosition.setValue({\n            x: moveX,\n            y: moveY,\n        });\n    }\n    function onHandMove(nativeEvent, gestureState) {\n        var activeItem = getActiveItem();\n        if (!activeItem)\n            return false;\n        var moveX = gestureState.moveX, moveY = gestureState.moveY;\n        props.onDragging && props.onDragging(gestureState);\n        var xChokeAmount = Math.max(0, activeBlockOffset.x + moveX - (gridLayout.width - blockWidth));\n        var xMinChokeAmount = Math.min(0, activeBlockOffset.x + moveX);\n        var dragPosition = {\n            x: moveX - xChokeAmount - xMinChokeAmount,\n            y: moveY,\n        };\n        var originPosition = blockPositions[orderMap[activeItem.key].order];\n        var dragPositionToActivePositionDistance = getDistance(dragPosition, originPosition);\n        activeItem.currentPosition.setValue(dragPosition);\n        var closetItemIndex = activeItemIndex;\n        var closetDistance = dragPositionToActivePositionDistance;\n        items.forEach(function (item, index) {\n            if (item.itemData.disabledReSorted)\n                return;\n            if (index != activeItemIndex) {\n                var dragPositionToItemPositionDistance = getDistance(dragPosition, blockPositions[orderMap[item.key].order]);\n                if (dragPositionToItemPositionDistance < closetDistance &&\n                    dragPositionToItemPositionDistance < blockWidth) {\n                    closetItemIndex = index;\n                    closetDistance = dragPositionToItemPositionDistance;\n                }\n            }\n        });\n        if (activeItemIndex != closetItemIndex) {\n            var closetOrder = orderMap[items[closetItemIndex].key].order;\n            resetBlockPositionByOrder(orderMap[activeItem.key].order, closetOrder);\n            orderMap[activeItem.key].order = closetOrder;\n            props.onResetSort && props.onResetSort(getSortData());\n        }\n    }\n    function onHandRelease() {\n        var activeItem = getActiveItem();\n        if (!activeItem)\n            return false;\n        props.onDragRelease && props.onDragRelease(getSortData());\n        setPanResponderCapture(false);\n        activeItem.currentPosition.flattenOffset();\n        moveBlockToBlockOrderPosition(activeItem.key);\n        setActiveItemIndex(undefined);\n    }\n    function resetBlockPositionByOrder(activeItemOrder, insertedPositionOrder) {\n        var disabledReSortedItemCount = 0;\n        if (activeItemOrder > insertedPositionOrder) {\n            for (var i = activeItemOrder - 1; i >= insertedPositionOrder; i--) {\n                var key = getKeyByOrder(i);\n                var item = itemMap[key];\n                if (item && item.disabledReSorted) {\n                    disabledReSortedItemCount++;\n                }\n                else {\n                    orderMap[key].order += disabledReSortedItemCount + 1;\n                    disabledReSortedItemCount = 0;\n                    moveBlockToBlockOrderPosition(key);\n                }\n            }\n        }\n        else {\n            for (var i = activeItemOrder + 1; i <= insertedPositionOrder; i++) {\n                var key = getKeyByOrder(i);\n                var item = itemMap[key];\n                if (item && item.disabledReSorted) {\n                    disabledReSortedItemCount++;\n                }\n                else {\n                    orderMap[key].order -= disabledReSortedItemCount + 1;\n                    disabledReSortedItemCount = 0;\n                    moveBlockToBlockOrderPosition(key);\n                }\n            }\n        }\n    }\n    function moveBlockToBlockOrderPosition(itemKey) {\n        var itemIndex = utils_1.findIndex(items, function (item) { return item.key === itemKey; });\n        items[itemIndex].currentPosition.flattenOffset();\n        react_native_1.Animated.timing(items[itemIndex].currentPosition, {\n            toValue: blockPositions[orderMap[itemKey].order],\n            duration: 200,\n            useNativeDriver: false\n        }).start();\n    }\n    function getKeyByOrder(order) {\n        return utils_1.findKey(orderMap, function (item) { return item.order === order; });\n    }\n    function getSortData() {\n        var sortData = [];\n        items.forEach(function (item) {\n            sortData[orderMap[item.key].order] = item.itemData;\n        });\n        return sortData;\n    }\n    function getDistance(startOffset, endOffset) {\n        var xDistance = startOffset.x + activeBlockOffset.x - endOffset.x;\n        var yDistance = startOffset.y + activeBlockOffset.y - endOffset.y;\n        return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\n    }\n    function setActiveBlock(itemIndex, item) {\n        if (item.disabledDrag)\n            return;\n        setPanResponderCapture(true);\n        setActiveItemIndex(itemIndex);\n    }\n    function startDragStartAnimation() {\n        if (!props.dragStartAnimation) {\n            dragStartAnimatedValue.setValue(1);\n            react_native_1.Animated.timing(dragStartAnimatedValue, {\n                toValue: 1.1,\n                duration: 100,\n                useNativeDriver: false\n            }).start();\n        }\n    }\n    function getBlockStyle(itemIndex) {\n        return [\n            {\n                justifyContent: 'center',\n                alignItems: 'center',\n            },\n            hadInitBlockSize && {\n                width: blockWidth,\n                height: blockHeight,\n                position: 'absolute',\n                top: items[itemIndex].currentPosition.getLayout().top,\n                left: items[itemIndex].currentPosition.getLayout().left,\n            },\n        ];\n    }\n    function getDragStartAnimation(itemIndex) {\n        if (activeItemIndex != itemIndex) {\n            return;\n        }\n        var dragStartAnimation = props.dragStartAnimation || getDefaultDragStartAnimation();\n        return __assign({ zIndex: 3 }, dragStartAnimation);\n    }\n    function getActiveItem() {\n        if (activeItemIndex === undefined)\n            return false;\n        return items[activeItemIndex];\n    }\n    function getDefaultDragStartAnimation() {\n        return {\n            transform: [\n                {\n                    scale: dragStartAnimatedValue,\n                },\n            ],\n            shadowColor: '#000000',\n            shadowOpacity: 0.2,\n            shadowRadius: 6,\n            shadowOffset: {\n                width: 1,\n                height: 1,\n            },\n        };\n    }\n    function addItem(item, index) {\n        blockPositions.push(getBlockPositionByOrder(items.length));\n        orderMap[item.key] = {\n            order: index,\n        };\n        itemMap[item.key] = item;\n        items.push({\n            key: item.key,\n            itemData: item,\n            currentPosition: new react_native_1.Animated.ValueXY(getBlockPositionByOrder(index)),\n        });\n    }\n    function removeItem(item) {\n        var itemIndex = utils_1.findIndex(items, function (curItem) { return curItem.key === item.key; });\n        items.splice(itemIndex, 1);\n        blockPositions.pop();\n        delete orderMap[item.key];\n    }\n    function diffData() {\n        props.data.forEach(function (item, index) {\n            if (orderMap[item.key]) {\n                if (orderMap[item.key].order != index) {\n                    orderMap[item.key].order = index;\n                    moveBlockToBlockOrderPosition(item.key);\n                }\n                var currentItem = items.find(function (i) { return i.key === item.key; });\n                if (currentItem) {\n                    currentItem.itemData = item;\n                }\n                itemMap[item.key] = item;\n            }\n            else {\n                addItem(item, index);\n            }\n        });\n        var deleteItems = utils_1.differenceBy(items, props.data, 'key');\n        deleteItems.forEach(function (item) {\n            removeItem(item);\n        });\n    }\n    react_1.useEffect(function () {\n        startDragStartAnimation();\n    }, [activeItemIndex]);\n    react_1.useEffect(function () {\n        if (hadInitBlockSize) {\n            initBlockPositions();\n        }\n    }, [gridLayout]);\n    react_1.useEffect(function () {\n        resetGridHeight();\n    });\n    if (hadInitBlockSize) {\n        diffData();\n    }\n    var itemList = items.map(function (item, itemIndex) {\n        return (<block_1.Block onPress={onBlockPress.bind(null, itemIndex)} onLongPress={setActiveBlock.bind(null, itemIndex, item.itemData)} panHandlers={panResponder.panHandlers} style={getBlockStyle(itemIndex)} dragStartAnimationStyle={getDragStartAnimation(itemIndex)} key={item.key}>\n        {props.renderItem(item.itemData, orderMap[item.key].order)}\n      </block_1.Block>);\n    });\n    return (<react_native_1.Animated.View style={[\n        styles.draggableGrid,\n        props.style,\n        {\n            height: gridHeight,\n        },\n    ]} onLayout={assessGridSize}>\n      {hadInitBlockSize && itemList}\n    </react_native_1.Animated.View>);\n};\nvar styles = react_native_1.StyleSheet.create({\n    draggableGrid: {\n        flex: 1,\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n    },\n});\n//# sourceMappingURL=draggable-grid.js.map"]},"metadata":{},"sourceType":"script"}