{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _reactNativeResponsiveScreen = require(\"react-native-responsive-screen\");\n\nvar _images = require(\"../common/images\");\n\nvar _reactNativeResponsiveImage = _interopRequireDefault(require(\"react-native-responsive-image\"));\n\nvar _trivia = _interopRequireDefault(require(\"../Screens/trivia/trivia\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\sahil\\\\Desktop\\\\ybh\\\\src\\\\common\\\\Bottomtabs.js\";\n\nvar BottomTab = function BottomTab(_ref) {\n  var state = _ref.state,\n      descriptors = _ref.descriptors,\n      navigation = _ref.navigation;\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.ButtonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, state.routes.map(function (route, index) {\n    var options = descriptors[route.key].options;\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var isFocused = state.index === index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!isFocused && !event.defaultPrevented) {\n        navigation.navigate(route.name);\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    return _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n      accessibilityRole: \"button\",\n      testID: options.tabBarTestID,\n      onLongPress: onLongPress,\n      accessibilityStates: isFocused ? ['selected'] : [],\n      activeOpacity: 0.95,\n      onPress: onPress,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, _react.default.createElement(_reactNative.View, {\n      style: {\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, _react.default.createElement(_reactNative.View, {\n      style: isFocused ? {\n        height: 70,\n        width: (0, _reactNativeResponsiveScreen.widthPercentageToDP)(20),\n        marginTop: 20,\n        backgroundColor: '#9F74C5',\n        alignItems: 'center',\n        justifyContent: 'center'\n      } : {\n        height: 70,\n        width: (0, _reactNativeResponsiveScreen.widthPercentageToDP)(20),\n        marginTop: 20,\n        backgroundColor: '#9F74C5',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, isFocused && _react.default.createElement(_reactNative.View, {\n      style: {\n        position: 'absolute',\n        height: 20,\n        width: (0, _reactNativeResponsiveScreen.widthPercentageToDP)(20),\n        top: -17\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 19\n      }\n    }, _react.default.createElement(_reactNative.Image, {\n      source: _images.selectedTabCurve,\n      width: '100%',\n      height: 20,\n      resizeMode: \"cover\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    })), _react.default.createElement(_reactNativeResponsiveImage.default, {\n      source: options.icon,\n      initHeight: \"30\",\n      initWidth: \"30\",\n      resizeMode: \"contain\",\n      style: isFocused ? {\n        tintColor: 'white'\n      } : {\n        tintColor: 'white'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }))));\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  ButtonContainer: {\n    flexDirection: 'row',\n    marginTop: -20\n  }\n});\n\nvar _default = BottomTab;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/sahil/Desktop/ybh/src/common/Bottomtabs.js"],"names":["BottomTab","state","descriptors","navigation","styles","ButtonContainer","routes","map","route","index","options","key","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","navigate","onLongPress","tabBarTestID","alignItems","height","width","marginTop","backgroundColor","justifyContent","position","top","selectedTabCurve","icon","tintColor","StyleSheet","create","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Text, View, StyleSheet, Platform, Image} from 'react-native';\r\nimport {TouchableOpacity} from 'react-native-gesture-handler';\r\nimport {\r\n  heightPercentageToDP as hp,\r\n  widthPercentageToDP,\r\n  widthPercentageToDP as wp,\r\n} from 'react-native-responsive-screen';\r\nimport {selectedTabCurve} from '../common/images';\r\n// import {RedColor, whiteColor, purpleColor} from '../../utils/fonts';\r\n// import {Red12pxFont} from '../../utils/CommonStyles';\r\n// import {camera} from '../../utils/Images';\r\nimport ResponsiveImage from 'react-native-responsive-image';\r\nimport Trivia from '../Screens/trivia/trivia';\r\n\r\nconst BottomTab = ({state, descriptors, navigation}) => {\r\n  // const focusedOptions = descriptors[state.routes[state.index].key].options;\r\n\r\n  // if (focusedOptions.tabBarVisible === true) {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <View style={styles.ButtonContainer}>\r\n      {state.routes.map((route, index) => {\r\n        const {options} = descriptors[route.key];\r\n        const label =\r\n          options.tabBarLabel !== undefined\r\n            ? options.tabBarLabel\r\n            : options.title !== undefined\r\n            ? options.title\r\n            : route.name;\r\n\r\n        const isFocused = state.index === index;\r\n\r\n        const onPress = () => {\r\n          const event = navigation.emit({\r\n            type: 'tabPress',\r\n            target: route.key,\r\n            canPreventDefault: true,\r\n          });\r\n\r\n          if (!isFocused && !event.defaultPrevented) {\r\n            navigation.navigate(route.name);\r\n          }\r\n        };\r\n\r\n        const onLongPress = () => {\r\n          navigation.emit({\r\n            type: 'tabLongPress',\r\n            target: route.key,\r\n          });\r\n        };\r\n        return (\r\n          <TouchableOpacity\r\n            accessibilityRole=\"button\"\r\n            testID={options.tabBarTestID}\r\n            onLongPress={onLongPress}\r\n            accessibilityStates={isFocused ? ['selected'] : []}\r\n            activeOpacity={0.95}\r\n            onPress={onPress}>\r\n            <View style={{alignItems: 'center'}}>\r\n              <View\r\n                style={\r\n                  isFocused\r\n                    ? {\r\n                        // backgroundColor: 'white',\r\n                        height: 70,\r\n                        width: widthPercentageToDP(20),\r\n                        marginTop: 20,\r\n                        backgroundColor: '#9F74C5',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                      }\r\n                    : {\r\n                        height: 70,\r\n                        width: widthPercentageToDP(20),\r\n                        marginTop: 20,\r\n                        backgroundColor: '#9F74C5',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                      }\r\n                }>\r\n                {isFocused && (\r\n                  <View\r\n                    style={{\r\n                      position: 'absolute',\r\n                      height: 20,\r\n                      width: widthPercentageToDP(20),\r\n                      top: -17,\r\n                    }}>\r\n                    <Image\r\n                      source={selectedTabCurve}\r\n                      width={'100%'}\r\n                      height={20}\r\n                      resizeMode=\"cover\"\r\n                    />\r\n                  </View>\r\n                )}\r\n                <ResponsiveImage\r\n                  source={options.icon}\r\n                  initHeight=\"30\"\r\n                  initWidth=\"30\"\r\n                  resizeMode=\"contain\"\r\n                  style={\r\n                    isFocused\r\n                      ? {\r\n                          tintColor: 'white',\r\n                        }\r\n                      : {tintColor: 'white'}\r\n                  }\r\n                />\r\n              </View>\r\n            </View>\r\n          </TouchableOpacity>\r\n        );\r\n      })}\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  ButtonContainer: {\r\n    flexDirection: 'row',\r\n    marginTop: -20,\r\n  },\r\n});\r\nexport default BottomTab;\r\n"]},"metadata":{},"sourceType":"script"}